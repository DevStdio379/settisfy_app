import React, { useEffect, useMemo, useState } from 'react';
import { View, Text, Image, TouchableOpacity } from 'react-native';
import Ionicons from 'react-native-vector-icons/Ionicons';
import { COLORS } from '../constants/theme';
import { Booking, BookingActivityType, BookingActorType, updateBooking, uploadImageIncompletionEvidence } from '../services/BookingServices';
import { GlobalStyleSheet } from '../constants/StyleSheet';
import AttachmentForm from './Forms/AttachmentForm';
import { DynamicOption } from '../services/CatalogueServices';
import Input from './Input/Input';
import { arrayUnion } from 'firebase/firestore';
import { generateId } from '../helper/HelperFunctions';

interface Props {
    booking: Booking;
    selectedAddons: DynamicOption[];
    newAddons?: DynamicOption[]; // optional
    isEditable?: boolean;
    hideCheckboxes?: boolean; // new prop to hide checkboxes
}

const BookingSummaryCard2: React.FC<Props> = ({
    booking,
    selectedAddons,
    newAddons,
    isEditable = false,
    hideCheckboxes = false,
}) => {
    const images = booking.catalogueService.imageUrls || [];
    const [localAddons, setLocalAddons] = useState<DynamicOption[]>(selectedAddons);
    const [calculatedTotal, setCalculatedTotal] = useState(0);
    const [includeManual, setIncludeManual] = useState<boolean>(
        // Boolean(Number(booking.status === 7 ? booking.newManualQuotePrice : booking.manualQuotePrice)) || 
        !booking.incompletionManualQuoteCheck
    );

    // keep localAddons in sync when prop changes
    useEffect(() => {
        setLocalAddons(selectedAddons);
    }, [selectedAddons]);

    // Merge both old & new addons so removed ones still appear
    const mergedAddons = useMemo(() => {
        const map = new Map<string, DynamicOption>();

        // start from localAddons so UI reflects current checked state
        localAddons.forEach((addon) => {
            map.set(addon.name, { ...addon, subOptions: addon.subOptions.map((o) => ({ ...o })) });
        });

        // add new ones if not exist (or bring in new subOptions)
        newAddons?.forEach((addon) => {
            if (map.has(addon.name)) {
                const existing = map.get(addon.name)!;
                const existingLabels = existing.subOptions.map((o) => o.label);
                addon.subOptions.forEach((opt) => {
                    if (!existingLabels.includes(opt.label)) {
                        existing.subOptions.push({ ...opt });
                    }
                });
            } else {
                map.set(addon.name, { ...addon, subOptions: addon.subOptions.map((o) => ({ ...o })) });
            }
        });

        return Array.from(map.values());
    }, [localAddons, newAddons]);

    // ✅ Compare between old and new addons
    const getChangeStatus = (addonName: string, subLabel: string): 'added' | 'removed' | 'same' => {
        if (!newAddons) return 'same';
        const inOld = selectedAddons.some((a) => a.name === addonName && a.subOptions.some((s) => s.label === subLabel));
        const inNew = newAddons.some((a) => a.name === addonName && a.subOptions.some((s) => s.label === subLabel));
        if (!inOld && inNew) return 'added';
        if (inOld && !inNew) return 'removed';
        return 'same';
    };

    const handleToggleAddon = (addonIndex: number, subIndex: number) => {
        if (!isEditable) return;
        setLocalAddons((prev) =>
            prev.map((addon, i) => {
                if (i !== addonIndex) return addon;
                return {
                    ...addon,
                    subOptions: addon.subOptions.map((opt, j) => (j === subIndex ? { ...opt, isCompleted: !opt.isCompleted } : opt)),
                };
            })
        );
    };

    useEffect(() => {
        let total = Number(booking.catalogueService.basePrice) || 0;

        // only add completed subOptions that are NOT marked as 'removed'
        mergedAddons.forEach((addon) => {
            addon.subOptions.forEach((opt) => {
                const status = getChangeStatus(addon.name, opt.label);
                if (status !== 'removed' && opt.isCompleted) {
                    total += Number(opt.additionalPrice) || 0;
                }
            });
        });

        total += 2; // platform fee

        if (includeManual) {
            const manualPrice = Number(booking.status === 7 ? booking.newManualQuotePrice : booking.manualQuotePrice) || 0;
            total += manualPrice;
        }

        setCalculatedTotal(total);
    }, [mergedAddons, booking, includeManual]);

    const anyIncomplete = mergedAddons.some((addon) => addon.subOptions.some((opt) => !opt.isCompleted));

    const manualPrice = Number(booking.status === 7 ? booking.newManualQuotePrice : booking.manualQuotePrice) || 0;
    const manualDescription = booking.status === 7 ? booking.newManualQuoteDescription : booking.manualQuoteDescription;

    return (
        <View style={{ width: '100%', paddingTop: 20, gap: 10 }}>
            {/* Product Info */}
            <View style={{ flexDirection: 'row', marginBottom: 20 }}>
                <Image source={{ uri: images[0] }} style={{ width: 100, height: 100, borderRadius: 8, marginRight: 16 }} />
                <View style={{ flex: 1, marginTop: 5 }}>
                    <Text style={{ fontSize: 16, marginBottom: 5 }}>
                        <Text style={{ color: '#E63946', fontWeight: 'bold' }}>RM{booking.catalogueService.basePrice}</Text> / Session
                    </Text>
                    <Text
                        style={{
                            fontSize: 16,
                            fontWeight: 'bold',
                            marginBottom: 5,
                            color: COLORS.title,
                            marginTop: 10,
                        }}
                    >
                        Service Pricing Breakdown
                    </Text>
                    <Text style={{ fontSize: 12, color: COLORS.black }}>Product ID: {booking.catalogueService.id}</Text>
                </View>
            </View>

            <View style={GlobalStyleSheet.line} />

            {/* Base Price */}
            <View style={{ flexDirection: 'row', justifyContent: 'space-between', marginBottom: 10 }}>
                <Text style={{ fontSize: 14, color: '#333' }}>Service Price</Text>
                <Text style={{ fontSize: 14, fontWeight: 'bold' }}>RM{booking.catalogueService.basePrice}</Text>
            </View>

            {/* Addons Comparison */}
            {mergedAddons.map((addon, addonIndex) => (
                <View key={addon.name}>
                    {addon.subOptions.map((opt, subIndex) => {
                        const status = getChangeStatus(addon.name, opt.label);
                        return (
                            <View
                                key={opt.label}
                                style={{
                                    flexDirection: 'row',
                                    justifyContent: 'space-between',
                                    alignItems: 'center',
                                    marginBottom: 6,
                                    opacity: status === 'removed' ? 0.4 : 1,
                                }}
                            >
                                <View style={{ flexDirection: 'row', alignItems: 'center', flex: 1 }}>
                                    {!hideCheckboxes && (
                                        <TouchableOpacity
                                            disabled={!isEditable}
                                            onPress={() => handleToggleAddon(addonIndex, subIndex)}
                                            style={{
                                                width: 22,
                                                height: 22,
                                                borderRadius: 5,
                                                borderWidth: 2,
                                                borderColor: COLORS.inputBorder,
                                                justifyContent: 'center',
                                                alignItems: 'center',
                                                marginRight: 8,
                                                backgroundColor: opt.isCompleted ? COLORS.primary : COLORS.input,
                                                opacity: isEditable ? 1 : 0.5,
                                            }}
                                        >
                                            {opt.isCompleted && <Ionicons name="checkmark" size={16} color={COLORS.white} />}
                                        </TouchableOpacity>
                                    )}

                                    <Text style={{ fontSize: 14, color: '#333' }}>
                                        {addon.name}: {opt.label}{' '}
                                        {status === 'added' && <Text style={{ color: 'green' }}>+ Added</Text>}
                                        {status === 'removed' && <Text style={{ color: 'red' }}>– Removed</Text>}
                                    </Text>
                                </View>

                                <Text style={{ fontSize: 14, fontWeight: 'bold' }}>
                                    RM{Number(opt.additionalPrice || 0).toFixed(2)}
                                </Text>
                            </View>
                        );
                    })}
                </View>
            ))}

            {/* Platform Fee */}
            <View style={{ flexDirection: 'row', justifyContent: 'space-between', marginBottom: 10 }}>
                <Text style={{ fontSize: 14, color: '#333' }}>Platform Fee</Text>
                <Text style={{ fontSize: 14, fontWeight: 'bold' }}>RM2.00</Text>
            </View>

            {/* Manual Quote Section */}
            {(
                (booking.manualQuoteDescription && booking.manualQuoteDescription.trim() !== '' && Number(booking.manualQuotePrice) > 0) ||
                (booking.status === 7 && booking.newManualQuoteDescription && booking.newManualQuoteDescription.trim() !== '' && Number(booking.newManualQuotePrice) > 0)
            ) && (
                <View style={{ marginBottom: 10 }}>
                    <Text style={{ fontSize: 14, fontWeight: 'bold', marginBottom: 6 }}>Manual Quote</Text>
                    <View style={{ flexDirection: 'row', alignItems: 'center', marginBottom: 8 }}>
                        {!hideCheckboxes && (
                            <TouchableOpacity
                                disabled={!isEditable}
                                onPress={() => setIncludeManual((v) => !v)}
                                style={{
                                    marginRight: 8,
                                    width: 22,
                                    height: 22,
                                    borderRadius: 5,
                                    borderWidth: 2,
                                    borderColor: COLORS.inputBorder,
                                    justifyContent: 'center',
                                    alignItems: 'center',
                                    backgroundColor: includeManual ? COLORS.primary : COLORS.input,
                                    opacity: isEditable ? 1 : 0.5,
                                }}
                            >
                                {includeManual && <Ionicons name="checkmark" size={16} color={COLORS.white} />}
                            </TouchableOpacity>
                        )}
                        <Text style={{ fontSize: 14, color: '#333' }}>Include manual quote (RM{manualPrice.toFixed(2)})</Text>
                    </View>

                    <Input
                        value={manualDescription}
                        backround={COLORS.card}
                        readOnly={true}
                        style={{
                            fontSize: 12,
                            borderRadius: 12,
                            backgroundColor: COLORS.input,
                            borderColor: COLORS.inputBorder,
                            borderWidth: 1,
                            height: 80,
                            width: '100%',
                        }}
                        inputicon
                        placeholder={`e.g. Got a grassy platform.`}
                        multiline={true}
                        numberOfLines={4}
                    />
                </View>
            )}
            <View style={GlobalStyleSheet.line} />
            {/* Total */}
            <View style={{ flexDirection: 'row', justifyContent: 'space-between', marginBottom: 10 }}>
                <Text style={{ fontSize: 14, fontWeight: 'bold' }}>Total</Text>
                <Text style={{ fontSize: 14, color: '#333', fontWeight: 'bold' }}>RM{calculatedTotal.toFixed(2)}</Text>
            </View>
            
            {/* Job Incompletion Evidence */}
            {(anyIncomplete || !includeManual) && (
                <View>
                    <View style={GlobalStyleSheet.line} />
                    <AttachmentForm
                        title="Incompletion Evidence"
                        description="Attach photos and remarks to verify your service incompletion."
                        initialImages={booking?.incompletionImageUrls ?? []}
                        initialRemark={booking?.incompletionRemark ?? ''}
                        isEditable={isEditable}
                        showSubmitButton={isEditable}
                        onSubmit={async (data) => {
                            await uploadImageIncompletionEvidence(booking.id!, data.images ?? []).then((urls => {
                                data.images = urls;
                            }));
                            await updateBooking(booking.id!, {
                                incompletionAddonsCheck: mergedAddons,
                                // store the manual quote checkbox state (checked = includeManual)
                                incompletionManualQuoteCheck: !includeManual,
                                incompletionImageUrls: data.images ?? [],
                                incompletionRemark: data.remark ?? '',
                                status: 8,
                                timeline: arrayUnion({
                                    id: generateId(),
                                    type: BookingActivityType.JOB_INCOMPLETE,
                                    actor: BookingActorType.CUSTOMER,
                                    timestamp: new Date(),
                                    
                                    // additional info
                                    incompletionAddonsCheck: mergedAddons,
                                    // store the manual quote checkbox state in the timeline entry too
                                    incompletionManualQuoteCheck: !includeManual,
                                    incompletionImageUrls: data.images,
                                    incompletion: data.remark,
                                    isIncompletionCompleted: false, 
                                })
                            });
                        }}
                    />
                </View>
            )}
        </View>
    );
};

export default BookingSummaryCard2;
